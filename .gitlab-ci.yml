stages:
  - build
  #- deploy

image: docker:20.10.16

variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_DRIVER: overlay2 # specifies the storage driver for Docker
  DOCKER_TLS_CERTDIR: "/certs" # directory where TLS certificates are stored for secure communication with the Docker daemon
  DOCKER_TLS_VERIFY: 1 # enables TLS verification for secure Docker operations
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client" # path to the client TLS certificates
  CI_API_PATH: "api"
  CI_PROJECT_DIR: "API"
  API_VERSION: 0.1

services:
  - docker:20.10.16-dind # Docker-in-Docker (DinD) service image that allows running Docker commands inside a Docker container

before_script:
  - for try in {1..10}; do sleep 0.5; docker info && break ; done # attempts to connect to the Docker daemon up ensuring the Docker service is available before proceeding

# build:
#   stage: build
#   script:
#     - >-
#       docker build ./API
#       --tag "${CI_REGISTRY}/${CI_API_PATH}:${API_VERSION}"
#     - docker push "${CI_REGISTRY}/${CI_API_PATH}:${API_VERSION}" # pushes the built Docker image to the specified registry, making it available for deployment

build:
   stage: build
   # Using kaniko to create a container inside another container for enhanced security.
   image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
   script:
      - mkdir -p /kaniko/.docker
      # Upload the container image to the registry. The image is tagged with the commit hash.
      - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n "json_key:${CI_REGISTRY_KEY}" | base64 | tr -d '\n' )\"}}}" > /kaniko/.docker/config.json
      - >-
         /kaniko/executor
         --context "${CI_PROJECT_DIR}"
         --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
         --destination "${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_SHORT_SHA}"
